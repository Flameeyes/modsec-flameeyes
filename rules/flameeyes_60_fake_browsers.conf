# -*- apache -*-
# Copyright © 2010 Diego Elio Pettenò <flameeyes@gmail.com>

# A number of spambots tries to mimic known good User-Agent values,
# harvested either on honeypot sites, or through statistics viewers
# such as awstats. Often enough, they get them slightly wrong,
# mangling a few key characters, try to identify them and reject them
# on that basis.
SecRule REQUEST_HEADERS:User-Agent "@beginsWith mozilla/4.0+" \
	"phase:2,t:lowercase,msg:'Spaces converted to + symbols: %{REQUEST_HEADERS.User-Agent}',deny,status:403"
SecRule REQUEST_HEADERS:User-Agent "@contains (compatible- " \
	"phase:2,t:lowercase,msg:'Semicolons replaced by dashes: %{REQUEST_HEADERS.User-Agent}',deny,status:403"
SecRule REQUEST_HEADERS:User-Agent "\([^\)]+$" \
	"phase:2,t:lowercase,msg:'Unterminated User-Agent string: %{REQUEST_HEADERS.User-Agent}',deny,status:403"

# Yet another common mistake from false user-agents: they don't add
# the proper space after the first agent declaration (noticed with
# fake Opera strings, but it's a possible general mistake).
SecRule REQUEST_HEADERS:User-Agent "^[a-zA-Z]+/[0-9.]+\(" \
        "phase:2,t:none,msg:'No space before parenthesis: %{REQUEST_HEADERS.User-Agent}',deny,status:403"

# MSIE reports a single .NET CLR token for each version of .NET that
# is installed, but only once per series.
SecRule REQUEST_HEADERS:User-Agent "(?:\.net clr 1\.0.*\.net clr 1\.0|\.net clr 1\.1.*\.net clr 1\.1|\.net clr 2\.0.*\.net clr 2\.0|\.net clr 3\.0.*.net clr 3\.0|\.net clr 3\.5.*\.net clr 3\.5|\.net clr 4\.0.*\.net clr 4\.0)" \
        "phase:2,t:lowercase,msg:'Multiple .NET CLR tokens: %{REQUEST_HEADERS.User-Agent}',deny,status:403"

# No known implementation of .NET on Linux adds a ".NET CLR"
# specification to Firefox; so if you find any of that, simply kill
# them.
SecRule REQUEST_HEADERS:User-Agent ".* Linux .* Gecko/.*\.NET CLR" \
        "phase:2,t:none,msg:'Fake browser; Linux never reports .NET CLR: %{REQUEST_HEADERS.User-Agent}',deny,status:403"

# This is terrific, some spammers seem to insist on being both MSIE and Opera:
SecRule REQUEST_HEADERS:User-Agent " msie .* opera[ /][0-9]" \
        "phase:2,t:lowercase,msg:'MSIE and Opera, not a chance.',deny,status:403"

# Also some seem to expect Opera to send the usual Mozilla/ line as well, which is never the case.
SecRule REQUEST_HEADERS:User-Agent "^.+opera[ /][0-9]" \
        "phase:2,t:lowercase,msg:'Fake Opera browser (not starting with Opera)',deny,status:403"

# Not sending Accept header is a protocol violation in HTTP/1.1;
# browsers always send it, legit crawlers sometimes don't send it, but
# spammers masking as real browsers do often enough.
SecRule &REQUEST_HEADERS:Accept "@eq 0" \
        "chain,phase:2,msg:'Missing Accept header when passing as a browser',deny,status:403"
SecRule REQUEST_HEADERS:User-Agent "@pm safari firefox msie opera" \
        "t:lowercase"
