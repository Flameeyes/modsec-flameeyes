# -*- apache -*-
# Copyright © 2010 Diego Elio Pettenò <flameeyes@gmail.com>

# A number of spambots tries to mimic known good User-Agent values,
# harvested either on honeypot sites, or through statistics viewers
# such as awstats. Often enough, they get them slightly wrong,
# mangling a few key characters, try to identify them and reject them
# on that basis.
SecRule REQUEST_HEADERS:User-Agent "@beginsWith mozilla/4.0+" \
	"phase:2,t:lowercase,msg:'Spaces converted to + symbols: %{REQUEST_HEADERS.User-Agent}',deny,status:403"
SecRule REQUEST_HEADERS:User-Agent "@contains (compatible- " \
	"phase:2,t:lowercase,msg:'Semicolons replaced by dashes: %{REQUEST_HEADERS.User-Agent}',deny,status:403"
SecRule REQUEST_HEADERS:User-Agent "\([^\)]+$" \
	"phase:2,t:lowercase,msg:'Unterminated User-Agent string: %{REQUEST_HEADERS.User-Agent}',deny,status:403"

# Yet another common mistake from false user-agents: they don't add
# the proper space after the first agent declaration (noticed with
# fake Opera strings, but it's a possible general mistake).
SecRule REQUEST_HEADERS:User-Agent "^[a-zA-Z]+/[0-9.]+\(" \
        "phase:2,t:none,msg:'No space before parenthesis: %{REQUEST_HEADERS.User-Agent}',deny,status:403"

# MSIE reports a single .NET CLR token for each version of .NET that
# is installed, but only once per series.
#
# An exception seems to apply to .net clr 3.0 whereby many users seem
# to report both version 3.0.4506.2152 and 3.0.04504.30, in different
# orders; while it might be some malware's watermarking I've been
# unable to track it down for sure and it causes more trouble than it
# fixes.
SecRule REQUEST_HEADERS:User-Agent "(?:\.net clr 1\.0.*\.net clr 1\.0|\.net clr 1\.1.*\.net clr 1\.1|\.net clr 2\.0.*\.net clr 2\.0|\.net clr 3\.5.*\.net clr 3\.5|\.net clr 4\.0.*\.net clr 4\.0)" \
        "phase:2,t:lowercase,msg:'Multiple .NET CLR tokens: %{REQUEST_HEADERS.User-Agent}',deny,status:403"

# No known implementation of .NET on Linux adds a ".NET CLR"
# specification to Firefox; so if you find any of that, simply kill
# them.
SecRule REQUEST_HEADERS:User-Agent ".* Linux .* Gecko/.*\.NET CLR" \
        "phase:2,t:none,msg:'Fake browser; Firefox on Linux never reports .NET CLR: %{REQUEST_HEADERS.User-Agent}',deny,status:403"

# There are a few browsers that really doesn't exist anymore for real,
# but are still used by spammers; make sure to filter those as well.
SecRule REQUEST_HEADERS:User-Agent "@pmFromFile flameeyes_bad_browsers.data" \
	"phase:2,t:lowercase,deny,status:403,msg:'Suspect browser %{REQUEST_HEADERS.User-Agent}'"

# Opera is one of the few browsers that doesn't declare itself as
# Mozilla/*; some spammers though insists on declaring themselves MSIE
# and Opera. And there are other fake Opera browser User-Agents
# around.
#
# Unfortunately, Opera Mini on some operating systems has a very bogus
# User-agent string, so don't report problems if the connection is
# declaring itself WAP.
SecRule REQUEST_HEADERS:User-Agent "^.* opera[ /][0-9]" \
        "phase:2,t:lowercase,msg:'Fake Opera browser (not starting with Opera)',deny,status:403,chain"
SecRule &REQUEST_HEADERS:X-Wap-Profile "@eq 0"

###############################
# HEADER CHECKING STARTS HERE #
###############################

# Checking if the browser provides all HTTP/1.1-compliant headers is
# usually very helpful; unfortunately a number of transparent proxies
# seem to mangle this badly, causing false positives. If using a
# proxy, bypass this section.

SecRule &REQUEST_HEADERS:Via "@eq 1" \
        "phase:2,skipAfter:FLAMEEYES_END_FAKE_BROWSERS_HEADERS,nolog"

# Not sending Accept header is a protocol violation in HTTP/1.1;
# browsers always send it, legit crawlers sometimes don't send it, but
# spammers masking as real browsers do often enough.
SecRule &REQUEST_HEADERS:Accept "@eq 0" \
        "chain,phase:2,msg:'Missing Accept header when passing as a browser',deny,status:403"
SecRule REQUEST_HEADERS:User-Agent "@pm safari firefox msie opera" \
        "t:lowercase"

# There is no requirement for other Accept-* headers to be present,
# but most browsers send it anyway, and we can use them to judge
# whether a browser is real or not.
SecRule &REQUEST_HEADERS:Accept-Encoding "@eq 0" \
        "chain,phase:2,msg:'Missing Accept-Encoding header when passing as a browser',deny,status:403"
SecRule REQUEST_HEADERS:User-Agent "@pm msie safari opera" \
        "t:lowercase"

SecRule &REQUEST_HEADERS:Accept-Language "@eq 0" \
        "chain,phase:2,msg:'Missing Accept-Language header when passing as a browser',deny,status:403"
SecRule REQUEST_HEADERS:User-Agent "@pm safari opera" \
        "t:lowercase,chain"
# Epiphany browser reports itself as Safari but has a much rougher
# HTTP implementation.
SecRule REQUEST_HEADERS:User-Agent "!@pm epiphany" \
        "t:lowercase"

SecMarker FLAMEEYES_END_FAKE_BROWSERS_HEADERS
